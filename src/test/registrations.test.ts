import app from '../app';

const request = require('supertest');
var Utils = require('../utils/index'); 

/**
 * GET
 */
describe('GET api/v1/registrations', () => {

    test('responds with JSON object of registrations', async (done) => {
        const response = await request(app).get('/api/v1/registrations');
        
        expect(response.status).toBe(200);
        expect(response.body.message).toEqual('Successfully retrieved registrations.');
        expect(response.body instanceof Object).toBe(true);
       
        expect(response.body.data[0]).toMatchObject({
            id: expect.any(Number),
            registration_state: expect.any(String),
            registration_meta: expect.any(String),
            user_id: expect.any(Number),
            event_id: expect.any(Number),
            created_at: expect.any(String),
            updated_at: expect.any(String),
            // anonymized_at: expect.any.toEqual(null)  
        });
        
        done(); 
    });
 });

/**
 * GET/:id
 */

describe('GET api/v1/registrations/:id', () => {

    test('responds with single JSON object', async (done) => {
    const response = await request(app).get('/api/v1/registrations/1')
        expect(response.status).toBe(200);
        expect(response.body.message).toEqual('Successfully retrieved registration by id.');
        expect(response.body instanceof Object).toBe(true);

        expect(response.body.data).toMatchObject({
            id: expect.any(Number),
            registration_state: expect.any(String),
            registration_meta: expect.any(String),
            user_id: expect.any(Number),
            event_id: expect.any(Number),
            created_at: expect.any(String),
            updated_at: expect.any(String),
            // anonymized_at: expect.any.toEqual(null)  
        });

        done();
    });
});

/**
 * POST
 */
//   // to do... 
/*
describe('POST api/v1/registrations', () => {

    let timestamp = Utils.datetimeTimestamp(); 
    let regMeta = { "first_name": "Test", "last_name": "Testington", "phone_number": "123456789", "contact_me": true, "email_address": null}; 
    regMeta.email_address = `chaitest-${timestamp.replace(/ +/g, '-')}@testRegistrations.com`;  

    let testJSON = {
        'registration_state': 'unverified',
        'event_id': 2,
        'registration_meta': JSON.stringify(regMeta), 
        'created_at': timestamp
        // 'id': generated by mysql 
        // 'user_id': if no user exists w/ reg_meta email_address, new user record is created and user_id is assigned
    }; 

    test('responds with JSON object', async (done) => {

        let success_resp_1: string = "Successfully added new registration and corresponding 'users' table record.";
        let success_resp_2: string = "Successfully updated existing registration.";

        await request(app)
            .post('/api/v1/registrations')
            .send(testJSON)
            .expect(201)
            .then(async (response) => {
                expect(response.status).toBe(201);
                expect(response.body instanceof Object).toBe(true);
                expect(response.body.message).toEqual(success_resp_1 || success_resp_2);
            });

        done(); 
    });
});
*/

/**
 * PUT
 */
describe('PUT api/v1/registrations', () => {

    let timestamp = Utils.datetimeTimestamp(); 
    let testJSON = {
        'id': 1,
        'registration_state': 'unverified',
        'updated_at': timestamp
    }; 

    test('responds with JSON object', async (done) => { 
        await request(app)
        .put('/api/v1/registrations')
        .send(testJSON)
        .expect(200)
        .then(async (response) => {
            expect(response.status).toBe(200);
            expect(response.body instanceof Object).toBe(true);
            expect(response.body.message).toEqual('Successfully updated registration.');
        });
                     
        done(); 
    });
});

/**
 * DELETE
 */

// to do... 
 
